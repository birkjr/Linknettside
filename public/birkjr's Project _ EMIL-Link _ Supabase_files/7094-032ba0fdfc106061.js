!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="02ebe596-71b1-4dd9-90f0-84b03ca9138a",e._sentryDebugIdIdentifier="sentry-dbid-02ebe596-71b1-4dd9-90f0-84b03ca9138a")}catch(e){}}(),(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7094],{69072:function(e,n,t){"use strict";t.d(n,{o:function(){return a}});let a=[{id:1,type:"template",title:"Create table",description:'Basic table template. Change "table_name" to the name you prefer.',sql:"create table table_name (\n  id bigint generated by default as identity primary key,\n  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null,\n  updated_at timestamp with time zone default timezone('utc'::text, now()) not null,\n  data jsonb,\n  name text\n);"},{id:2,type:"template",title:"Add view",description:"Template to add a view. Make sure to change the table and column names to ones that already exist.",sql:"CREATE VIEW countries_view AS\nSELECT id, continent\nFROM countries;"},{id:3,type:"template",title:"Add column",description:"Template to add a column. Make sure to change the name and type.",sql:"alter table table_name\nadd column new_column_name data_type;"},{id:4,type:"template",title:"Add comments",description:"Templates to add a comment to either a table or a column.",sql:"comment on table table_name is 'Table description';\ncomment on column table_name.column_name is 'Column description';"},{id:5,type:"template",title:"Show extensions",description:"Get a list of extensions in your database and status.",sql:"select\n  name, comment, default_version, installed_version\nfrom\n  pg_available_extensions\norder by\n  name asc;"},{id:6,type:"template",title:"Show version",description:"Get your Postgres version.",sql:"select * from\n  (select version()) as version,\n  (select current_setting('server_version_num')) as version_number;"},{id:7,type:"template",title:"Show active connections",description:"Get the number of active and max connections.",sql:"select * from\n(select count(pid) as active_connections FROM pg_stat_activity where state = 'active') active_connections,\n(select setting as max_connections from pg_settings where name = 'max_connections') max_connections;"},{id:8,type:"template",title:"Automatically update timestamps",description:"Update a column timestamp on every update.",sql:'\ncreate extension if not exists moddatetime schema extensions;\n\n-- assuming the table name is "todos", and a timestamp column "updated_at"\n-- this trigger will set the "updated_at" column to the current timestamp for every update\ncreate trigger\n  handle_updated_at before update\non todos\nfor each row execute\n  procedure moddatetime(updated_at);\n  '.trim()},{id:9,type:"template",title:"Increment field value",description:"Update a field with incrementing value using stored procedure.",sql:"\ncreate function increment(row_id int)\nreturns void as\n$$\n  update table_name\n  set field_name = field_name + 1\n  where id = row_id;\n$$\nlanguage sql volatile;\n\n-- you can call the function from your browser with supabase-js\n-- const { data, error } = await supabase.rpc('increment', { row_id: 2 })\n  ".trim()},{id:10,type:"template",title:"pg_stat_statements report",description:"Select from pg_stat_statements and view recent queries",sql:"-- pg_stat_statements report\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows,\n    statements.wal_bytes,\n    statements.wal_records\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    total_time desc\n  limit\n    100;"},{id:11,type:"quickstart",title:"Colors",description:"Create a table with a list of colors and their hex values.",sql:"-- Information from Wikipedia \"List of Colors\"\nCREATE TYPE public.color_source AS ENUM (\n    '99COLORS_NET',\n    'ART_PAINTS_YG07S',\n    'BYRNE',\n    'CRAYOLA',\n    'CMYK_COLOR_MODEL',\n    'COLORCODE_IS',\n    'COLORHEXA',\n    'COLORXS',\n    'CORNELL_UNIVERSITY',\n    'COLUMBIA_UNIVERSITY',\n    'DUKE_UNIVERSITY',\n    'ENCYCOLORPEDIA_COM',\n    'ETON_COLLEGE',\n    'FANTETTI_AND_PETRACCHI',\n    'FINDTHEDATA_COM',\n    'FERRARIO_1919',\n    'FEDERAL_STANDARD_595',\n    'FLAG_OF_INDIA',\n    'FLAG_OF_SOUTH_AFRICA',\n    'GLAZEBROOK_AND_BALDRY',\n    'GOOGLE',\n    'HEXCOLOR_CO',\n    'ISCC_NBS',\n    'KELLY_MOORE',\n    'MATTEL',\n    'MAERZ_AND_PAUL',\n    'MILK_PAINT',\n    'MUNSELL_COLOR_WHEEL',\n    'NATURAL_COLOR_SYSTEM',\n    'PANTONE',\n    'PLOCHERE',\n    'POURPRE_COM',\n    'RAL',\n    'RESENE',\n    'RGB_COLOR_MODEL',\n    'THOM_POOLE',\n    'UNIVERSITY_OF_ALABAMA',\n    'UNIVERSITY_OF_CALIFORNIA_DAVIS',\n    'UNIVERSITY_OF_CAMBRIDGE',\n    'UNIVERSITY_OF_NORTH_CAROLINA',\n    'UNIVERSITY_OF_TEXAS_AT_AUSTIN',\n    'X11_WEB',\n    'XONA_COM'\n);\n\ncreate table public.colors (\n  id bigint generated by default as identity primary key,\n  name text,\n  hex text not null,\n  red int2,\n  green int2,\n  blue int2,\n  hue int2,\n  sat_hsl int2,\n  light_hsl int2,\n  sat_hsv int2,\n  val_hsv int2,\n  source color_source\n);\n\ncomment on table colors is 'Full list of colors (based on various sources)';\ncomment on column colors.name is 'Name of the color';\ncomment on column colors.hex is 'Hex tripliets of the color for HTML web colors';\ncomment on column colors.red is 'Red in RGB (%)';\ncomment on column colors.green is 'Green in RGB (%)';\ncomment on column colors.blue is 'Blue in RGB (%)';\ncomment on column colors.hue is 'Hue in HSL (\xb0)';\ncomment on column colors.sat_hsl is 'Saturation in HSL (%)';\ncomment on column colors.light_hsl is 'Light in HSL (%)';\ncomment on column colors.sat_hsv is 'Saturation in HSV (%)';\ncomment on column colors.val_hsv is 'Value in HSV (%)';\ncomment on column colors.source is 'Source of information on the color';\n\ninsert into public.colors (name, hex, red, green, blue, hue, sat_hsl, light_hsl, sat_hsv, val_hsv, source) values\n  ('Absolute Zero', '#0048BA', 0, 28, 73, 217, 100, 37, 100, 73, 'CRAYOLA'),\n  ('Acid green', '#B0BF1A', 69, 75, 10, 65, 76, 43, 76, 75, 'ART_PAINTS_YG07S'),\n  ('Aero', '#7CB9E8', 49, 73, 91, 206, 70, 70, 47, 91, 'MAERZ_AND_PAUL'),\n  ('African violet', '#B284BE', 70, 52, 75, 288, 31, 63, 31.5, '75', 'PANTONE'),\n  ('Air superiority blue', '#72A0C1', 45, 63, 76, 205, 39, 60, 41, 76, 'FEDERAL_STANDARD_595'),\n  ('Alice blue', '#F0F8FF', 94, 97, 100, 208, 100, 97, 6, 100, 'X11_WEB'),\n  ('Alizarin', '#DB2D43', 86, 18, 26, 352, 71, 52, 79, 86, 'MAERZ_AND_PAUL'),\n  ('Alloy orange', '#C46210', 77, 38, 6, 27, 85, 42, 92, 77, 'CRAYOLA'),\n  ('Almond', '#EED9C4', 93, 85, 77, 30, 55, 85, 18, 93, 'CRAYOLA'),\n  ('Amaranth deep purple', '#9F2B68', 62, 17, 41, 328, 57, 40, 73, 62, 'MAERZ_AND_PAUL'),\n  ('Amaranth pink', '#F19CBB', 95, 61, 73, 338, 75, 78, 35, 95, 'MAERZ_AND_PAUL'),\n  ('Amaranth purple', '#AB274F', 67, 15, 31, 342, 63, 41, 77, 67, 'MAERZ_AND_PAUL'),\n  ('Amazon', '#3B7A57', 23, 48, 34, 147, 35, 36, 52, 48, 'XONA_COM'),\n  ('Amber', '#FFBF00', 100, 75, 0, 45, 100, 50, 100, 100, 'RGB_COLOR_MODEL'),\n  ('Amethyst', '#9966CC', 60, 40, 80, 270, 50, 60, 50, 80, 'X11_WEB'),\n  ('Android green', '#3DDC84', 24, 86, 53, 148, 69, 55, 72, 86, 'GOOGLE'),\n  ('Antique brass', '#C88A65', 78, 54, 40, 22, 47, 59, 49, 78, 'CRAYOLA'),\n  ('Antique bronze', '#665D1E', 40, 36, 12, 53, 55, 26, 71, 40, 'ISCC_NBS'),\n  ('Antique fuchsia', '#915C83', 57, 36, 51, 316, 22, 46, 37, 57, 'PLOCHERE'),\n  ('Antique ruby', '#841B2D', 52, 11, 18, 350, 66, 31, 80, 52, 'ISCC_NBS'),\n  ('Antique white', '#FAEBD7', 98, 92, 84, 34, 78, 91, 14, 98, 'X11_WEB'),\n  ('Apricot', '#FBCEB1', 98, 81, 69, 24, 90, 84, 29, 98, 'MAERZ_AND_PAUL'),\n  ('Aqua', '#00FFFF', 0, 100, 100, 180, 100, 50, 100, 100, 'X11_WEB'),\n  ('Aquamarine', '#7FFFD4', 50, 100, 83, 160, 100, 75, 50, 100, 'X11_WEB'),\n  ('Arctic lime', '#D0FF14', 82, 100, 8, 72, 100, 54, 92, 100, 'CRAYOLA'),\n  ('Artichoke green', '#4B6F44', 29, 44, 27, 110, 24, 35, 39, 44, 'PANTONE'),\n  ('Arylide yellow', '#E9D66B', 91, 84, 42, 51, 74, 67, 54, 91, 'COLORHEXA'),\n  ('Ash gray', '#B2BEB5', 70, 75, 71, 135, 9, 72, 6, 75, 'ISCC_NBS'),\n  ('Atomic tangerine', '#FF9966', 100, 60, 40, 20, 100, 70, 60, 100, 'CRAYOLA'),\n  ('Aureolin', '#FDEE00', 99, 93, 0, 56, 100, 50, 100, 99, 'X11_WEB'),\n  ('Azure', '#007FFF', 0, 50, 100, 210, 100, 50, 100, 100, 'RGB_COLOR_MODEL'),\n  ('Azure (X11/web color)', '#F0FFFF', 94, 100, 100, 180, 100, 97, 6, 100, 'X11_WEB'),\n  ('Baby blue', '#89CFF0', 54, 81, 94, 199, 77, 74, 43, 94, 'MAERZ_AND_PAUL'),\n  ('Baby blue eyes', '#A1CAF1', 63, 79, 95, 209, 74, 79, 33, 95, 'PLOCHERE'),\n  ('Baby pink', '#F4C2C2', 96, 76, 76, 0, 69, 86, 20, 96, 'ISCC_NBS'),\n  ('Baby powder', '#FEFEFA', 100, 100, 98, 60, 67, 99, 2, 100, 'CRAYOLA'),\n  ('Baker-Miller pink', '#FF91AF', 100, 57, 69, 344, 100, 78, 43, 100, 'BYRNE'),\n  ('Banana Mania', '#FAE7B5', 98, 91, 71, 43, 87, 85, 28, 98, 'CRAYOLA'),\n  ('Barbie Pink', '#DA1884', 85, 9, 52, 327, 80, 48, 89, 85, 'MATTEL'),\n  ('Barn red', '#7C0A02', 49, 4, 1, 4, 97, 25, 98, 49, 'MILK_PAINT'),\n  ('Battleship grey', '#848482', 52, 52, 51, 60, 1, 51, 2, 52, 'ISCC_NBS'),\n  ('Beau blue', '#BCD4E6', 74, 83, 90, 206, 46, 82, 18, 90, 'PLOCHERE'),\n  ('Beaver', '#9F8170', 62, 51, 44, 22, 20, 53, 30, 62, 'CRAYOLA'),\n  ('Beige', '#F5F5DC', 96, 96, 86, 60, 56, 91, 10, 96, 'X11_WEB'),\n  ('B''dazzled blue', '#2E5894', 18, 35, 58, 215, 53, 38, 69, 58, 'CRAYOLA'),\n  ('Big dip o''ruby', '#9C2542', 61, 15, 26, 345, 62, 38, 76, 61, 'CRAYOLA'),\n  ('Bisque', '#FFE4C4', 100, 89, 77, 33, 100, 88, 23, 100, 'X11_WEB'),\n  ('Bistre', '#3D2B1F', 24, 17, 12, 24, 33, 18, 49, 24, '99COLORS_NET'),\n  ('Bistre brown', '#967117', 59, 44, 9, 43, 73, 34, 85, 59, 'ISCC_NBS'),\n  ('Bitter lemon', '#CAE00D', 79, 88, 5, 66, 89, 47, 94, 88, 'XONA_COM'),\n  ('Black', '#000000', 0, 0, 0, 0, 0, 0, 0, 0, 'RGB_COLOR_MODEL'),\n  ('Black bean', '#3D0C02', 24, 5, 1, 10, 94, 12, 97, 24, 'XONA_COM'),\n  ('Black coral', '#54626F', 33, 38, 44, 209, 14, 38, 24, 44, 'CRAYOLA'),\n  ('Black olive', '#3B3C36', 23, 24, 21, 70, 5, 22, 10, 24, 'RAL'),\n  ('Black Shadows', '#BFAFB2', 75, 69, 70, 349, 11, 72, 8, 75, 'CRAYOLA'),\n  ('Blanched almond', '#FFEBCD', 100, 92, 80, 36, 100, 90, 20, 100, 'X11_WEB'),\n  ('Blast-off bronze', '#A57164', 65, 44, 39, 12, 27, 52, 39, 65, 'CRAYOLA'),\n  ('Bleu de France', '#318CE7', 19, 55, 91, 210, 79, 55, 79, 91, 'POURPRE_COM'),\n  ('Blizzard blue', '#ACE5EE', 67, 90, 93, 188, 66, 80, 28, 93, 'CRAYOLA'),\n  ('Blood red', '#660000', 40, 0, 0, 0, 100, 20, 100, 40, 'THOM_POOLE'),\n  ('Blue', '#0000FF', 0, 0, 100, 240, 100, 50, 100, 100, 'X11_WEB'),\n  ('Blue (Crayola)', '#1F75FE', 12, 46, 100, 217, 99, 56, 88, 100, 'CRAYOLA'),\n  ('Blue (Munsell)', '#0093AF', 0, 58, 69, 190, 100, 34, 100, 69, 'MUNSELL_COLOR_WHEEL'),\n  ('Blue (NCS)', '#0087BD', 0, 53, 74, 197, 100, 37, 100, 74, 'NATURAL_COLOR_SYSTEM'),\n  ('Blue (Pantone)', '#0018A8', 0, 9, 66, 231, 100, 33, 100, 66, 'PANTONE'),\n  ('Blue (pigment)', '#333399', 20, 20, 60, 240, 50, 40, 67, 60, 'CMYK_COLOR_MODEL'),\n  ('Blue bell', '#A2A2D0', 64, 64, 82, 240, 33, 73, 22, 82, 'CRAYOLA'),\n  ('Blue-gray (Crayola)', '#6699CC', 40, 60, 80, 210, 50, 60, 50, 80, 'CRAYOLA'),\n  ('Blue jeans', '#5DADEC', 36, 68, 93, 206, 79, 65, 61, 93, 'CRAYOLA'),\n  ('Blue sapphire', '#126180', 7, 38, 50, 197, 75, 29, 86, 50, 'PANTONE'),\n  ('Blue-violet', '#8A2BE2', 54, 17, 89, 271, 76, 53, 81, 89, 'X11_WEB'),\n  ('Blue yonder', '#5072A7', 31, 45, 65, 217, 35, 48, 52, 65, 'PANTONE'),\n  ('Bluetiful', '#3C69E7', 24, 41, 91, 224, 78, 57, 74, 91, 'CRAYOLA'),\n  ('Blush', '#DE5D83', 87, 36, 51, 342, 66, 62, 58, 87, 'CRAYOLA'),\n  ('Bole', '#79443B', 47, 27, 23, 9, 34, 35, 51, 47, 'ISCC_NBS'),\n  ('Bone', '#E3DAC9', 89, 85, 79, 39, 32, 84, 11, 89, 'KELLY_MOORE'),\n  ('Brick red', '#CB4154', 80, 25, 33, 352, 57, 53, 68, 80, 'CRAYOLA'),\n  ('Bright lilac', '#D891EF', 85, 57, 94, 285, 75, 75, 39, 94, 'CRAYOLA'),\n  ('Bright yellow (Crayola)', '#FFAA1D', 100, 67, 11, 37, 100, 56, 89, 100, 'CRAYOLA'),\n  ('British racing green', '#004225', 0, 26, 15, 154, 100, 13, 100, 26, 'COLORHEXA'),\n  ('Bronze', '#CD7F32', 80, 50, 20, 30, 61, 50, 76, 80, 'MAERZ_AND_PAUL'),\n  ('Brown', '#964B00', 59, 29, 0, 30, 100, 29, 100, 59, 'COLORXS'),\n  ('Brown sugar', '#AF6E4D', 69, 43, 30, 20, 39, 49, 56, 69, 'CRAYOLA'),\n  ('Bud green', '#7BB661', 48, 71, 38, 102, 37, 55, 47, 71, 'PANTONE'),\n  ('Buff', '#FFC680', 100, 78, 50, 33, 100, 75, 50, 100, 'MAERZ_AND_PAUL'),\n  ('Burgundy', '#800020', 50, 0, 13, 345, 100, 25, 100, 50, 'MAERZ_AND_PAUL'),\n  ('Burlywood', '#DEB887', 87, 72, 53, 34, 57, 70, 39, 87, 'X11_WEB'),\n  ('Burnished brown', '#A17A74', 63, 48, 45, 8, 19, 54, 28, 63, 'CRAYOLA'),\n  ('Burnt orange', '#CC5500', 80, 33, 0, 25, 100, 40, 100, 80, 'UNIVERSITY_OF_TEXAS_AT_AUSTIN'),\n  ('Burnt sienna', '#E97451', 91, 45, 32, 14, 78, 62, 65, 91, 'FERRARIO_1919'),\n  ('Burnt umber', '#8A3324', 54, 20, 14, 9, 59, 34, 74, 54, 'XONA_COM'),\n  ('Byzantine', '#BD33A4', 74, 20, 64, 311, 58, 47, 73, 74, 'MAERZ_AND_PAUL'),\n  ('Byzantium', '#702963', 44, 16, 39, 311, 46, 30, 63, 44, 'ISCC_NBS'),\n  ('Cadet blue', '#5F9EA0', 37, 62, 63, 182, 26, 50, 41, 63, 'X11_WEB'),\n  ('Cadet grey', '#91A3B0', 57, 64, 69, 205, 16, 63, 18, 69, 'ISCC_NBS'),\n  ('Cadmium green', '#006B3C', 0, 42, 24, 154, 100, 21, 100, 42, 'ISCC_NBS'),\n  ('Cadmium orange', '#ED872D', 93, 53, 18, 28, 84, 55, 81, 93, 'ISCC_NBS'),\n  ('Caf\xe9 au lait', '#A67B5B', 65, 48, 36, 26, 30, 50, 45, 65, 'ISCC_NBS'),\n  ('Caf\xe9 noir', '#4B3621', 29, 21, 13, 30, 39, 21, 56, 29, 'ISCC_NBS'),\n  ('Cambridge blue', '#A3C1AD', 64, 76, 68, 140, 20, 70, 16, 76, 'UNIVERSITY_OF_CAMBRIDGE'),\n  ('Camel', '#C19A6B', 76, 60, 42, 33, 41, 59, 45, 76, 'ISCC_NBS'),\n  ('Cameo pink', '#EFBBCC', 94, 73, 80, 340, 62, 84, 22, 94, 'ISCC_NBS'),\n  ('Canary', '#FFFF99', 100, 100, 60, 60, 100, 80, 40, 100, 'CRAYOLA'),\n  ('Canary yellow', '#FFEF00', 100, 94, 0, 56, 100, 50, 100, 100, 'CMYK_COLOR_MODEL'),\n  ('Candy pink', '#E4717A', 89, 44, 48, 355, 68, 67, 50, 89, 'ISCC_NBS'),\n  ('Cardinal', '#C41E3A', 77, 12, 23, 350, 74, 44, 85, 77, 'MAERZ_AND_PAUL'),\n  ('Caribbean green', '#00CC99', 0, 80, 60, 165, 100, 40, 100, 80, 'CRAYOLA'),\n  ('Carmine', '#960018', 59, 0, 9, 350, 100, 29, 100, 59, 'POURPRE_COM'),\n  ('Carmine (M&P)', '#D70040', 84, 0, 25, 342, 100, 42, 100, 84, 'MAERZ_AND_PAUL'),\n  ('Carnation pink', '#FFA6C9', 100, 65, 79, 336, 100, 83, 35, 100, 'CRAYOLA'),\n  ('Carnelian', '#B31B1B', 70, 11, 11, 0, 74, 40, 85, 70, 'CORNELL_UNIVERSITY'),\n  ('Carolina blue', '#56A0D3', 34, 63, 83, 204, 59, 58, 59, 83, 'UNIVERSITY_OF_NORTH_CAROLINA'),\n  ('Carrot orange', '#ED9121', 93, 57, 13, 33, 85, 53, 86, 93, 'MAERZ_AND_PAUL'),\n  ('Catawba', '#703642', 44, 21, 26, 348, 35, 33, 52, 44, 'MAERZ_AND_PAUL'),\n  ('Cedar Chest', '#C95A49', 79, 35, 29, 8, 54, 54, 64, 79, 'CRAYOLA'),\n  ('Celadon', '#ACE1AF', 67, 88, 69, 123, 47, 78, 24, 88, 'ENCYCOLORPEDIA_COM'),\n  ('Celeste', '#B2FFFF', 70, 100, 100, 180, 100, 85, 30, 100, 'FANTETTI_AND_PETRACCHI'),\n  ('Cerise', '#DE3163', 87, 19, 39, 343, 72, 53, 78, 87, 'MAERZ_AND_PAUL'),\n  ('Cerulean', '#007BA7', 0, 48, 65, 196, 100, 33, 100, 65, 'MAERZ_AND_PAUL'),\n  ('Cerulean blue', '#2A52BE', 16, 32, 75, 224, 64, 46, 78, 75, 'MAERZ_AND_PAUL'),\n  ('Cerulean frost', '#6D9BC3', 43, 61, 76, 208, 42, 60, 44, 76, 'CRAYOLA'),\n  ('Cerulean (Crayola)', '#1DACD6', 11, 67, 84, 194, 76, 48, 86, 84, 'CRAYOLA'),\n  ('Cerulean (RGB)', '#0040FF', 0, 25, 100, 225, 100, 50, 100, 100, null),\n  ('Champagne', '#F7E7CE', 97, 91, 81, 37, 72, 89, 17, 97, 'MAERZ_AND_PAUL'),\n  ('Champagne pink', '#F1DDCF', 95, 87, 81, 25, 55, 88, 14, 95, 'PANTONE'),\n  ('Charcoal', '#36454F', 21, 27, 31, 204, 19, 26, 32, 31, 'ISCC_NBS'),\n  ('Charm pink', '#E68FAC', 90, 56, 67, 340, 64, 73, 38, 90, 'PLOCHERE'),\n  ('Chartreuse (web)', '#80FF00', 50, 100, 0, 90, 100, 50, 100, 100, 'RGB_COLOR_MODEL'),\n  ('Cherry blossom pink', '#FFB7C5', 100, 72, 77, 348, 100, 86, 28, 100, 'MAERZ_AND_PAUL'),\n  ('Chestnut', '#954535', 58, 27, 21, 10, 48, 40, 64, 58, 'MAERZ_AND_PAUL'),\n  ('Chili red', '#E23D28', 89, 24, 16, 5, 76, 52, 183, 125, 'FLAG_OF_SOUTH_AFRICA'),\n  ('China pink', '#DE6FA1', 87, 44, 63, 333, 63, 65, 50, 87, 'PLOCHERE'),\n  ('Chinese red', '#AA381E', 67, 22, 12, 11, 70, 39, 82, 67, 'ISCC_NBS'),\n  ('Chinese violet', '#856088', 52, 38, 53, 296, 17, 46, 29, 53, 'PANTONE'),\n  ('Chinese yellow', '#FFB200', 100, 70, 0, 42, 100, 50, 100, 100, 'ISCC_NBS'),\n  ('Chocolate (traditional)', '#7B3F00', 48, 25, 0, 31, 100, 24, 100, 48, 'MAERZ_AND_PAUL'),\n  ('Chocolate (web)', '#D2691E', 82, 41, 12, 25, 75, 47, 86, 82, 'X11_WEB'),\n  ('Cinereous', '#98817B', 60, 51, 48, 12, 12, 54, 19, 60, 'MAERZ_AND_PAUL'),\n  ('Cinnabar', '#E34234', 89, 26, 20, 5, 76, 55, 77, 89, 'MAERZ_AND_PAUL'),\n  ('Cinnamon Satin', '#CD607E', 80, 38, 49, 343, 52, 59, 53, 80, 'CRAYOLA'),\n  ('Citrine', '#E4D00A', 89, 82, 4, 54, 92, 47, 96, 89, 'MAERZ_AND_PAUL'),\n  ('Citron', '#9FA91F', 62, 66, 12, 64, 69, 39, 82, 66, 'XONA_COM'),\n  ('Claret', '#7F1734', 50, 9, 20, 343, 69, 29, 82, 50, 'XONA_COM'),\n  ('Coffee', '#6F4E37', 44, 31, 22, 25, 34, 33, 50, 44, 'ISCC_NBS'),\n  ('Columbia Blue', '#B9D9EB', 73, 85, 92, 202, 56, 82, 21, 92, 'COLUMBIA_UNIVERSITY'),\n  ('Congo pink', '#F88379', 97, 51, 47, 5, 90, 72, 51, 97, 'ISCC_NBS'),\n  ('Cool grey', '#8C92AC', 55, 57, 67, 229, 16, 61, 19, 67, 'ISCC_NBS'),\n  ('Copper', '#B87333', 72, 45, 20, 29, 57, 46, 72, 72, 'MAERZ_AND_PAUL'),\n  ('Copper (Crayola)', '#DA8A67', 85, 54, 40, 18, 61, 63, 53, 85, 'CRAYOLA'),\n  ('Copper penny', '#AD6F69', 68, 44, 41, 5, 29, 55, 39, 68, 'CRAYOLA'),\n  ('Copper red', '#CB6D51', 80, 43, 32, 14, 54, 56, 60, 80, 'ISCC_NBS'),\n  ('Copper rose', '#996666', 60, 40, 40, 0, 20, 50, 33, 60, '99COLORS_NET'),\n  ('Coquelicot', '#FF3800', 100, 22, 0, 13, 100, 50, 100, 100, 'COLORHEXA'),\n  ('Coral', '#FF7F50', 100, 50, 31, 16, 100, 66, 69, 100, 'X11_WEB'),\n  ('Coral pink', '#F88379', 97, 51, 47, 5, 90, 72, 51, 97, 'ISCC_NBS'),\n  ('Cordovan', '#893F45', 54, 25, 27, 355, 37, 39, 54, 54, 'PANTONE'),\n  ('Corn', '#FBEC5D', 98, 93, 36, 54, 95, 68, 63, 98, 'MAERZ_AND_PAUL'),\n  ('Cornflower blue', '#6495ED', 39, 58, 93, 219, 79, 66, 58, 93, 'X11_WEB'),\n  ('Cornsilk', '#FFF8DC', 100, 97, 86, 48, 100, 93, 14, 100, 'X11_WEB'),\n  ('Cosmic cobalt', '#2E2D88', 18, 18, 53, 241, 50, 36, 67, 53, 'CRAYOLA'),\n  ('Cosmic latte', '#FFF8E7', 100, 97, 91, 43, 100, 95, 9, 100, 'GLAZEBROOK_AND_BALDRY'),\n  ('Coyote brown', '#81613C', 51, 38, 24, 32, 37, 37, 52, 51, 'COLORCODE_IS'),\n  ('Cotton candy', '#FFBCD9', 100, 74, 85, 334, 100, 87, 26, 100, 'CRAYOLA'),\n  ('Cream', '#FFFDD0', 100, 99, 82, 57, 100, 91, 18, 100, 'MAERZ_AND_PAUL'),\n  ('Crimson', '#DC143C', 86, 8, 24, 348, 83, 47, 91, 86, 'X11_WEB'),\n  ('Crimson (UA)', '#9E1B32', 62, 11, 20, 349, 71, 36, 83, 62, 'UNIVERSITY_OF_ALABAMA'),\n  ('Cultured Pearl', '#F5F5F5', 96, 96, 96, 0, 0, 96, 0, 96, 'CRAYOLA'),\n  ('Cyan', '#00FFFF', 0, 100, 100, 180, 100, 50, 100, 100, 'X11_WEB'),\n  ('Cyan (process)', '#00B7EB', 0, 72, 92, 193, 100, 46, 100, 92, 'CMYK_COLOR_MODEL'),\n  ('Cyber grape', '#58427C', 35, 26, 49, 263, 31, 37, 47, 49, 'CRAYOLA'),\n  ('Cyber yellow', '#FFD300', 100, 83, 0, 50, 100, 50, 100, 100, 'PANTONE'),\n  ('Cyclamen', '#F56FA1', 96, 44, 63, 338, 87, 70, 54, 96, 'CRAYOLA'),\n  ('Dandelion', '#FED85D', 100, 85, 36, 46, 99, 68, 63, 100, 'CRAYOLA'),\n  ('Dark brown', '#654321', 40, 26, 13, 30, 51, 26, 67, 40, 'X11_WEB'),\n  ('Dark byzantium', '#5D3954', 36, 22, 33, 315, 24, 29, 39, 36, 'ISCC_NBS'),\n  ('Dark cyan', '#008B8B', 0, 55, 55, 180, 100, 27, 100, 55, 'X11_WEB'),\n  ('Dark electric blue', '#536878', 33, 41, 47, 206, 18, 40, 31, 47, 'ISCC_NBS'),\n  ('Dark goldenrod', '#B8860B', 72, 53, 4, 43, 89, 38, 94, 72, 'X11_WEB'),\n  ('Dark green (X11)', '#006400', 0, 39, 0, 120, 100, 20, 100, 39, 'X11_WEB'),\n  ('Dark jungle green', '#1A2421', 10, 14, 13, 162, 16, 12, 28, 14, 'ISCC_NBS'),\n  ('Dark khaki', '#BDB76B', 74, 72, 42, 56, 38, 58, 43, 74, 'X11_WEB'),\n  ('Dark lava', '#483C32', 28, 24, 20, 27, 18, 24, 31, 28, 'ISCC_NBS'),\n  ('Dark liver (horses)', '#543D37', 33, 24, 22, 12, 21, 27, 35, 33, 'UNIVERSITY_OF_CALIFORNIA_DAVIS'),\n  ('Dark magenta', '#8B008B', 55, 0, 55, 300, 100, 27, 100, 55, 'X11_WEB'),\n  ('Dark olive green', '#556B2F', 33, 42, 18, 82, 39, 30, 56, 42, 'X11_WEB'),\n  ('Dark orange', '#FF8C00', 100, 55, 0, 33, 100, 50, 100, 100, 'X11_WEB'),\n  ('Dark orchid', '#9932CC', 60, 20, 80, 280, 61, 50, 75, 80, 'X11_WEB'),\n  ('Dark purple', '#301934', 19, 10, 20, 291, 35, 15, 51, 20, 'ISCC_NBS'),\n  ('Dark red', '#8B0000', 55, 0, 0, 0, 100, 27, 100, 55, 'X11_WEB'),\n  ('Dark salmon', '#E9967A', 91, 59, 48, 15, 72, 70, 48, 91, 'X11_WEB'),\n  ('Dark sea green', '#8FBC8F', 56, 74, 56, 120, 25, 65, 24, 74, 'X11_WEB'),\n  ('Dark sienna', '#3C1414', 24, 8, 8, 0, 50, 16, 67, 24, 'ISCC_NBS'),\n  ('Dark sky blue', '#8CBED6', 55, 75, 84, 199, 47, 69, 35, 84, 'PANTONE'),\n  ('Dark slate blue', '#483D8B', 28, 24, 55, 248, 39, 39, 56, 55, 'X11_WEB'),\n  ('Dark slate gray', '#2F4F4F', 18, 31, 31, 180, 25, 25, 41, 31, 'X11_WEB'),\n  ('Dark spring green', '#177245', 9, 45, 27, 150, 66, 27, 80, 45, 'X11_WEB'),\n  ('Dark turquoise', '#00CED1', 0, 81, 82, 181, 100, 41, 100, 82, 'X11_WEB'),\n  ('Dark violet', '#9400D3', 58, 0, 83, 282, 100, 41, 100, 83, 'X11_WEB'),\n  ('Davy''s grey', '#555555', 33, 33, 33, 0, 0, 33, 0, 33, 'ISCC_NBS'),\n  ('Deep cerise', '#DA3287', 85, 20, 53, 330, 69, 53, 77, 85, 'CRAYOLA'),\n  ('Deep champagne', '#FAD6A5', 98, 84, 65, 35, 90, 81, 34, 98, 'ISCC_NBS'),\n  ('Deep chestnut', '#B94E48', 73, 31, 28, 3, 45, 50, 61, 73, 'CRAYOLA'),\n  ('Deep jungle green', '#004B49', 0, 29, 29, 178, 100, 15, 100, 29, 'ISCC_NBS'),\n  ('Deep pink', '#FF1493', 100, 8, 58, 328, 100, 54, 92, 100, 'X11_WEB'),\n  ('Deep saffron', '#FF9933', 100, 60, 20, 30, 100, 60, 80, 100, 'FLAG_OF_INDIA'),\n  ('Deep sky blue', '#00BFFF', 0, 75, 100, 195, 100, 50, 100, 100, 'X11_WEB'),\n  ('Deep Space Sparkle', '#4A646C', 29, 39, 42, 194, 19, 36, 31, 42, 'CRAYOLA'),\n  ('Deep taupe', '#7E5E60', 49, 37, 38, 356, 15, 43, 25, 49, 'PANTONE'),\n  ('Denim', '#1560BD', 8, 38, 74, 213, 80, 41, 89, 74, 'CRAYOLA'),\n  ('Denim blue', '#2243B6', 13, 26, 71, 227, 69, 42, 81, 71, 'CRAYOLA'),\n  ('Desert', '#C19A6B', 76, 60, 42, 33, 41, 59, 45, 76, 'ISCC_NBS'),\n  ('Desert sand', '#EDC9AF', 93, 79, 69, 25, 63, 81, 26, 93, 'CRAYOLA'),\n  ('Dim gray', '#696969', 41, 41, 41, 0, 0, 41, 0, 41, 'X11_WEB'),\n  ('Dodger blue', '#1E90FF', 12, 56, 100, 210, 100, 56, 88, 100, 'X11_WEB'),\n  ('Drab dark brown', '#4A412A', 29, 25, 16, 43, 28, 23, 43, 29, 'PANTONE'),\n  ('Duke blue', '#00009C', 0, 0, 61, 240, 100, 31, 100, 61, 'DUKE_UNIVERSITY'),\n  ('Dutch white', '#EFDFBB', 94, 87, 73, 42, 62, 84, 22, 94, 'RESENE'),\n  ('Ebony', '#555D50', 33, 36, 31, 97, 8, 34, 14, 36, 'MAERZ_AND_PAUL'),\n  ('Ecru', '#C2B280', 76, 70, 50, 45, 35, 63, 34, 76, 'ISCC_NBS'),\n  ('Eerie black', '#1B1B1B', 11, 11, 11, 0, 0, 11, 0, 11, 'CRAYOLA'),\n  ('Eggplant', '#614051', 38, 25, 32, 329, 21, 32, 34, 38, 'CRAYOLA'),\n  ('Eggshell', '#F0EAD6', 94, 92, 84, 46, 46, 89, 11, 94, 'ISCC_NBS'),\n  ('Electric lime', '#CCFF00', 80, 100, 0, 72, 100, 50, 100, 100, 'CRAYOLA'),\n  ('Electric purple', '#BF00FF', 75, 0, 100, 285, 100, 50, 100, 100, 'X11_WEB'),\n  ('Electric violet', '#8F00FF', 56, 0, 100, 274, 100, 50, 100, 100, 'ISCC_NBS'),\n  ('Emerald', '#50C878', 31, 78, 47, 140, 52, 55, 60, 78, 'MAERZ_AND_PAUL'),\n  ('Eminence', '#6C3082', 42, 19, 51, 284, 46, 35, 63, 51, 'XONA_COM'),\n  ('English lavender', '#B48395', 71, 51, 58, 338, 25, 61, 27, 71, 'PANTONE'),\n  ('English red', '#AB4B52', 67, 29, 32, 356, 39, 48, 56, 67, 'ISCC_NBS'),\n  ('English vermillion', '#CC474B', 80, 28, 29, 358, 57, 54, 65, 80, 'CRAYOLA'),\n  ('English violet', '#563C5C', 34, 24, 36, 289, 21, 30, 35, 36, 'ISCC_NBS'),\n  ('Erin', '#00FF40', 0, 100, 25, 135, 100, 50, 100, 100, 'MAERZ_AND_PAUL'),\n  ('Eton blue', '#96C8A2', 59, 78, 64, 134, 31, 69, 25, 78, 'ETON_COLLEGE'),\n  ('Fallow', '#C19A6B', 76, 60, 42, 33, 41, 59, 45, 76, 'ISCC_NBS'),\n  ('Falu red', '#801818', 50, 9, 9, 0, 68, 30, 81, 50, 'COLORHEXA'),\n  ('Fandango', '#B53389', 71, 20, 54, 320, 56, 46, 72, 71, 'MAERZ_AND_PAUL'),\n  ('Fandango pink', '#DE5285', 87, 32, 52, 338, 68, 60, 63, 87, 'PANTONE'),\n  ('Fawn', '#E5AA70', 90, 67, 44, 30, 69, 67, 51, 90, 'X11_WEB'),\n  ('Fern green', '#4F7942', 31, 47, 26, 106, 29, 37, 45, 47, 'MAERZ_AND_PAUL'),\n  ('Field drab', '#6C541E', 42, 33, 12, 42, 57, 27, 72, 42, 'ISCC_NBS'),\n  ('Fiery rose', '#FF5470', 100, 33, 44, 350, 100, 67, 67, 100, 'CRAYOLA'),\n  ('Finn', '#683068', 41, 19, 41, 300, 37, 30, 54, 41, 'HEXCOLOR_CO'),\n  ('Firebrick', '#B22222', 70, 13, 13, 0, 68, 42, 81, 70, 'X11_WEB'),\n  ('Fire engine red', '#CE2029', 81, 13, 16, 357, 73, 47, 84, 81, 'FINDTHEDATA_COM'),\n  ('Flame', '#E25822', 89, 35, 13, 17, 77, 51, 85, 89, 'ISCC_NBS'),\n  ('Flax', '#EEDC82', 93, 86, 51, 50, 76, 72, 45, 93, 'MAERZ_AND_PAUL'),\n  ('Flirt', '#A2006D', 64, 0, 43, 320, 100, 32, 100, 64, 'XONA_COM'),\n  ('Floral white', '#FFFAF0', 100, 98, 94, 40, 100, 97, 6, 100, 'X11_WEB'),\n  ('Forest green (web)', '#228B22', 13, 55, 13, 120, 61, 34, 76, 55, 'X11_WEB'),\n  ('French beige', '#A67B5B', 65, 48, 36, 26, 30, 50, 45, 65, 'ISCC_NBS'),\n  ('French bistre', '#856D4D', 52, 43, 30, 34, 27, 41, 42, 52, 'POURPRE_COM'),\n  ('French blue', '#0072BB', 0, 45, 73, 203, 100, 37, 100, 73, 'MAERZ_AND_PAUL'),\n  ('French fuchsia', '#FD3F92', 99, 25, 57, 334, 98, 62, 75, 99, 'POURPRE_COM'),\n  ('French lilac', '#86608E', 53, 38, 56, 290, 19, 47, 32, 56, 'ISCC_NBS'),\n  ('French lime', '#9EFD38', 62, 99, 22, 89, 98, 61, 78, 99, 'POURPRE_COM'),\n  ('French mauve', '#D473D4', 83, 45, 83, 300, 53, 64, 46, 83, 'POURPRE_COM'),\n  ('French pink', '#FD6C9E', 99, 42, 62, 339, 97, 71, 57, 99, 'POURPRE_COM'),\n  ('French raspberry', '#C72C48', 78, 17, 28, 349, 64, 48, 78, 78, 'POURPRE_COM'),\n  ('French sky blue', '#77B5FE', 47, 71, 100, 212, 99, 73, 53, 100, 'POURPRE_COM'),\n  ('French violet', '#8806CE', 53, 2, 81, 279, 94, 42, 97, 81, 'POURPRE_COM'),\n  ('Frostbite', '#E936A7', 91, 21, 65, 322, 80, 56, 77, 91, 'CRAYOLA'),\n  ('Fuchsia', '#FF00FF', 100, 0, 100, 300, 100, 50, 100, 100, 'X11_WEB'),\n  ('Fuchsia (Crayola)', '#C154C1', 76, 33, 76, 300, 47, 54, 56, 76, 'CRAYOLA'),\n  ('Fulvous', '#E48400', 89, 52, 0, 35, 100, 45, 100, 89, '99COLORS_NET'),\n  ('Fuzzy Wuzzy', '#87421F', 53, 26, 12, 20, 63, 33, 77, 53, 'CRAYOLA');\n".trim()},{id:12,type:"quickstart",title:"Slack Clone",description:"Build a basic slack clone with Row Level Security.",sql:"\n--\n-- For use with https://github.com/supabase/supabase/tree/master/examples/slack-clone/nextjs-slack-clone\n\n-- Custom types\ncreate type public.app_permission as enum ('channels.delete', 'messages.delete');\ncreate type public.app_role as enum ('admin', 'moderator');\ncreate type public.user_status as enum ('ONLINE', 'OFFLINE');\n\n-- USERS\ncreate table public.users (\n  id          uuid not null primary key, -- UUID from auth.users\n  username    text,\n  status      user_status default 'OFFLINE'::public.user_status\n);\ncomment on table public.users is 'Profile data for each user.';\ncomment on column public.users.id is 'References the internal Supabase Auth user.';\n\n-- CHANNELS\ncreate table public.channels (\n  id            bigint generated by default as identity primary key,\n  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,\n  slug          text not null unique,\n  created_by    uuid references public.users not null\n);\ncomment on table public.channels is 'Topics and groups.';\n\n-- MESSAGES\ncreate table public.messages (\n  id            bigint generated by default as identity primary key,\n  inserted_at   timestamp with time zone default timezone('utc'::text, now()) not null,\n  message       text,\n  user_id       uuid references public.users not null,\n  channel_id    bigint references public.channels on delete cascade not null\n);\ncomment on table public.messages is 'Individual messages sent by each user.';\n\n-- USER ROLES\ncreate table public.user_roles (\n  id        bigint generated by default as identity primary key,\n  user_id   uuid references public.users on delete cascade not null,\n  role      app_role not null,\n  unique (user_id, role)\n);\ncomment on table public.user_roles is 'Application roles for each user.';\n\n-- ROLE PERMISSIONS\ncreate table public.role_permissions (\n  id           bigint generated by default as identity primary key,\n  role         app_role not null,\n  permission   app_permission not null,\n  unique (role, permission)\n);\ncomment on table public.role_permissions is 'Application permissions for each role.';\n\n-- authorize with role-based access control (RBAC)\ncreate function public.authorize(\n  requested_permission app_permission,\n  user_id uuid\n)\nreturns boolean as\n$$\n  declare\n    bind_permissions int;\n  begin\n    select\n      count(*)\n    from public.role_permissions\n    inner join public.user_roles on role_permissions.role = user_roles.role\n    where\n      role_permissions.permission = authorize.requested_permission and\n      user_roles.user_id = authorize.user_id\n    into bind_permissions;\n\n    return bind_permissions > 0;\n  end;\n$$\nlanguage plpgsql security definer;\n\n-- Secure the tables\nalter table public.users\n  enable row level security;\nalter table public.channels\n  enable row level security;\nalter table public.messages\n  enable row level security;\nalter table public.user_roles\n  enable row level security;\nalter table public.role_permissions\n  enable row level security;\n\ncreate policy \"Allow logged-in read access\" on public.users\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.users\n  for insert with check ((select auth.uid()) = id);\ncreate policy \"Allow individual update access\" on public.users\n  for update using ( (select auth.uid()) = id );\ncreate policy \"Allow logged-in read access\" on public.channels\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.channels\n  for insert with check ((select auth.uid()) = created_by);\ncreate policy \"Allow individual delete access\" on public.channels\n  for delete using ((select auth.uid()) = created_by);\ncreate policy \"Allow authorized delete access\" on public.channels\n  for delete using (authorize('channels.delete', auth.uid()));\ncreate policy \"Allow logged-in read access\" on public.messages\n  for select using (auth.role() = 'authenticated');\ncreate policy \"Allow individual insert access\" on public.messages\n  for insert with check ((select auth.uid()) = user_id);\ncreate policy \"Allow individual update access\" on public.messages\n  for update using ((select auth.uid()) = user_id);\ncreate policy \"Allow individual delete access\" on public.messages\n  for delete using ((select auth.uid()) = user_id);\ncreate policy \"Allow authorized delete access\" on public.messages\n  for delete using (authorize('messages.delete', auth.uid()));\ncreate policy \"Allow individual read access\" on public.user_roles\n  for select using ((select auth.uid()) = user_id);\n\n-- Send \"previous data\" on change\nalter table public.users\n  replica identity full;\nalter table public.channels\n  replica identity full;\nalter table public.messages\n  replica identity full;\n\n-- inserts a row into public.users and assigns roles\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\n  declare is_admin boolean;\n  begin\n    insert into public.users (id, username)\n    values (new.id, new.email);\n\n    select count(*) = 1 from auth.users into is_admin;\n\n    if position('+supaadmin@' in new.email) > 0 then\n      insert into public.user_roles (user_id, role) values (new.id, 'admin');\n    elsif position('+supamod@' in new.email) > 0 then\n      insert into public.user_roles (user_id, role) values (new.id, 'moderator');\n    end if;\n\n    return new;\n  end;\n$$ language plpgsql security definer;\n\n-- trigger the function every time a user is created\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n/**\n * REALTIME SUBSCRIPTIONS\n * Only allow realtime listening on public tables.\n */\n\nbegin;\n  -- remove the realtime publication\n  drop publication if exists supabase_realtime;\n\n  -- re-create the publication but don't enable it for any tables\n  create publication supabase_realtime;\ncommit;\n\n-- add tables to the publication\nalter publication supabase_realtime add table public.channels;\nalter publication supabase_realtime add table public.messages;\nalter publication supabase_realtime add table public.users;\n\n-- DUMMY DATA\ninsert into public.users (id, username)\nvalues\n    ('8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e', 'supabot');\n\ninsert into public.channels (slug, created_by)\nvalues\n    ('public', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),\n    ('random', '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');\n\ninsert into public.messages (message, channel_id, user_id)\nvalues\n    ('Hello World \uD83D\uDC4B', 1, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e'),\n    ('Perfection is attained, not when there is nothing more to add, but when there is nothing left to take away.', 2, '8d0fd2b3-9ca7-4d9e-a95f-9e13dded323e');\n\ninsert into public.role_permissions (role, permission)\nvalues\n    ('admin', 'channels.delete'),\n    ('admin', 'messages.delete'),\n    ('moderator', 'messages.delete');\n".trim()},{id:13,type:"quickstart",title:"Todo List",description:"Build a basic todo list with Row Level Security.",sql:'\n--\n-- For use with:\n-- https://github.com/supabase/supabase/tree/master/examples/todo-list/sveltejs-todo-list or\n-- https://github.com/supabase/examples-archive/tree/main/supabase-js-v1/todo-list\n--\n\ncreate table todos (\n  id bigint generated by default as identity primary key,\n  user_id uuid references auth.users not null,\n  task text check (char_length(task) > 3),\n  is_complete boolean default false,\n  inserted_at timestamp with time zone default timezone(\'utc\'::text, now()) not null\n);\nalter table todos enable row level security;\ncreate policy "Individuals can create todos." on todos for\n    insert with check (auth.uid() = user_id);\ncreate policy "Individuals can view their own todos. " on todos for\n    select using ((select auth.uid()) = user_id);\ncreate policy "Individuals can update their own todos." on todos for\n    update using ((select auth.uid()) = user_id);\ncreate policy "Individuals can delete their own todos." on todos for\n    delete using ((select auth.uid()) = user_id);\n'.trim()},{id:14,type:"quickstart",title:"Stripe Subscriptions",description:"Starter template for the Next.js Stripe Subscriptions Starter.",sql:"\n/**\n* USERS\n* Note: This table contains user data. Users should only be able to view and update their own data.\n*/\ncreate table users (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  full_name text,\n  avatar_url text,\n  -- The customer's billing address, stored in JSON format.\n  billing_address jsonb,\n  -- Stores your customer's payment instruments.\n  payment_method jsonb\n);\nalter table users\n  enable row level security;\ncreate policy \"Can view own user data.\" on users\n  for select using ((select auth.uid()) = id);\ncreate policy \"Can update own user data.\" on users\n  for update using ((select auth.uid()) = id);\n\n/**\n* This trigger automatically creates a user entry when a new user signs up via Supabase Auth.\n*/\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\n  begin\n    insert into public.users (id, full_name, avatar_url)\n    values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n    return new;\n  end;\n$$\nlanguage plpgsql security definer;\n\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row\n    execute procedure public.handle_new_user();\n\n/**\n* CUSTOMERS\n* Note: this is a private table that contains a mapping of user IDs to Stripe customer IDs.\n*/\ncreate table customers (\n  -- UUID from auth.users\n  id uuid references auth.users not null primary key,\n  -- The user's customer ID in Stripe. User must not be able to update this.\n  stripe_customer_id text\n);\nalter table customers enable row level security;\n-- No policies as this is a private table that the user must not have access to.\n\n/**\n* PRODUCTS\n* Note: products are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate table products (\n  -- Product ID from Stripe, e.g. prod_1234.\n  id text primary key,\n  -- Whether the product is currently available for purchase.\n  active boolean,\n  -- The product's name, meant to be displayable to the customer. Whenever this product is sold via a subscription, name will show up on associated invoice line item descriptions.\n  name text,\n  -- The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.\n  description text,\n  -- A URL of the product image in Stripe, meant to be displayable to the customer.\n  image text,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table products\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on products\n  for select using (true);\n\n/**\n* PRICES\n* Note: prices are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type pricing_type as enum ('one_time', 'recurring');\ncreate type pricing_plan_interval as enum ('day', 'week', 'month', 'year');\ncreate table prices (\n  -- Price ID from Stripe, e.g. price_1234.\n  id text primary key,\n  -- The ID of the prduct that this price belongs to.\n  product_id text references products,\n  -- Whether the price can be used for new purchases.\n  active boolean,\n  -- A brief description of the price.\n  description text,\n  -- The unit amount as a positive integer in the smallest currency unit (e.g., 100 cents for US$1.00 or 100 for \xa5100, a zero-decimal currency).\n  unit_amount bigint,\n  -- Three-letter ISO currency code, in lowercase.\n  currency text check (char_length(currency) = 3),\n  -- One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.\n  type pricing_type,\n  -- The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.\n  interval pricing_plan_interval,\n  -- The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.\n  interval_count integer,\n  -- Default number of trial days when subscribing a customer to this price using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).\n  trial_period_days integer,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb\n);\nalter table prices\n  enable row level security;\ncreate policy \"Allow public read-only access.\" on prices\n  for select using (true);\n\n/**\n* SUBSCRIPTIONS\n* Note: subscriptions are created and managed in Stripe and synced to our DB via Stripe webhooks.\n*/\ncreate type subscription_status as enum ('trialing', 'active', 'canceled', 'incomplete', 'incomplete_expired', 'past_due', 'unpaid');\ncreate table subscriptions (\n  -- Subscription ID from Stripe, e.g. sub_1234.\n  id text primary key,\n  user_id uuid references auth.users not null,\n  -- The status of the subscription object, one of subscription_status type above.\n  status subscription_status,\n  -- Set of key-value pairs, used to store additional information about the object in a structured format.\n  metadata jsonb,\n  -- ID of the price that created this subscription.\n  price_id text references prices,\n  -- Quantity multiplied by the unit amount of the price creates the amount of the subscription. Can be used to charge multiple seats.\n  quantity integer,\n  -- If true the subscription has been canceled by the user and will be deleted at the end of the billing period.\n  cancel_at_period_end boolean,\n  -- Time at which the subscription was created.\n  created timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- Start of the current period that the subscription has been invoiced for.\n  current_period_start timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- End of the current period that the subscription has been invoiced for. At the end of this period, a new invoice will be created.\n  current_period_end timestamp with time zone default timezone('utc'::text, now()) not null,\n  -- If the subscription has ended, the timestamp of the date the subscription ended.\n  ended_at timestamp with time zone default timezone('utc'::text, now()),\n  -- A date in the future at which the subscription will automatically get canceled.\n  cancel_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.\n  canceled_at timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the beginning of that trial.\n  trial_start timestamp with time zone default timezone('utc'::text, now()),\n  -- If the subscription has a trial, the end of that trial.\n  trial_end timestamp with time zone default timezone('utc'::text, now())\n);\nalter table subscriptions\n  enable row level security;\ncreate policy \"Can only view own subs data.\" on subscriptions\n  for select using ((select auth.uid()) = user_id);\n\n/**\n * REALTIME SUBSCRIPTIONS\n * Only allow realtime listening on public tables.\n */\ndrop publication if exists supabase_realtime;\ncreate publication supabase_realtime\n  for table products, prices;\n".trim()},{id:15,type:"quickstart",title:"User Management Starter",description:"Sets up a public Profiles table which you can access with your API.",sql:"\n-- Create a table for public profiles\ncreate table profiles (\n  id uuid references auth.users on delete cascade not null primary key,\n  updated_at timestamp with time zone,\n  username text unique,\n  full_name text,\n  avatar_url text,\n  website text,\n\n  constraint username_length check (char_length(username) >= 3)\n);\n-- Set up Row Level Security (RLS)\n-- See https://supabase.com/docs/guides/auth/row-level-security for more details.\nalter table profiles\n  enable row level security;\n\ncreate policy \"Public profiles are viewable by everyone.\" on profiles\n  for select using (true);\n\ncreate policy \"Users can insert their own profile.\" on profiles\n  for insert with check ((select auth.uid()) = id);\n\ncreate policy \"Users can update own profile.\" on profiles\n  for update using ((select auth.uid()) = id);\n\n-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.\n-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.\ncreate function public.handle_new_user()\nreturns trigger\nset search_path = ''\nas $$\nbegin\n  insert into public.profiles (id, full_name, avatar_url)\n  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');\n  return new;\nend;\n$$ language plpgsql security definer;\ncreate trigger on_auth_user_created\n  after insert on auth.users\n  for each row execute procedure public.handle_new_user();\n\n-- Set up Storage!\ninsert into storage.buckets (id, name)\n  values ('avatars', 'avatars');\n\n-- Set up access controls for storage.\n-- See https://supabase.com/docs/guides/storage#policy-examples for more details.\ncreate policy \"Avatar images are publicly accessible.\" on storage.objects\n  for select using (bucket_id = 'avatars');\n\ncreate policy \"Anyone can upload an avatar.\" on storage.objects\n  for insert with check (bucket_id = 'avatars');\n".trim()},{id:16,type:"quickstart",title:"NextAuth Schema Setup",description:"Sets up a the Schema and Tables for the NextAuth Supabase Adapter.",sql:'\n--\n-- Name: next_auth; Type: SCHEMA;\n--\nCREATE SCHEMA next_auth;\n\nGRANT USAGE ON SCHEMA next_auth TO service_role;\nGRANT ALL ON SCHEMA next_auth TO postgres;\n\n--\n-- Create users table\n--\nCREATE TABLE IF NOT EXISTS next_auth.users\n(\n    id uuid NOT NULL DEFAULT gen_random_uuid(),\n    name text,\n    email text,\n    "emailVerified" timestamp with time zone,\n    image text,\n    CONSTRAINT users_pkey PRIMARY KEY (id),\n    CONSTRAINT email_unique UNIQUE (email)\n);\n\nGRANT ALL ON TABLE next_auth.users TO postgres;\nGRANT ALL ON TABLE next_auth.users TO service_role;\n\n--- uid() function to be used in RLS policies\nCREATE FUNCTION next_auth.uid() RETURNS uuid\n    LANGUAGE sql STABLE\n    AS $$\n  select\n    coalesce(\n        nullif(current_setting(\'request.jwt.claim.sub\', true), \'\'),\n        (nullif(current_setting(\'request.jwt.claims\', true), \'\')::jsonb ->> \'sub\')\n    )::uuid\n$$;\n\n--\n-- Create sessions table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.sessions\n(\n    id uuid NOT NULL DEFAULT gen_random_uuid(),\n    expires timestamp with time zone NOT NULL,\n    "sessionToken" text NOT NULL,\n    "userId" uuid,\n    CONSTRAINT sessions_pkey PRIMARY KEY (id),\n    CONSTRAINT sessionToken_unique UNIQUE ("sessionToken"),\n    CONSTRAINT "sessions_userId_fkey" FOREIGN KEY ("userId")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.sessions TO postgres;\nGRANT ALL ON TABLE next_auth.sessions TO service_role;\n\n--\n-- Create accounts table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.accounts\n(\n    id uuid NOT NULL DEFAULT gen_random_uuid(),\n    type text NOT NULL,\n    provider text NOT NULL,\n    "providerAccountId" text NOT NULL,\n    refresh_token text,\n    access_token text,\n    expires_at bigint,\n    token_type text,\n    scope text,\n    id_token text,\n    session_state text,\n    oauth_token_secret text,\n    oauth_token text,\n    "userId" uuid,\n    CONSTRAINT accounts_pkey PRIMARY KEY (id),\n    CONSTRAINT provider_unique UNIQUE (provider, "providerAccountId"),\n    CONSTRAINT "accounts_userId_fkey" FOREIGN KEY ("userId")\n        REFERENCES  next_auth.users (id) MATCH SIMPLE\n        ON UPDATE NO ACTION\n        ON DELETE CASCADE\n);\n\nGRANT ALL ON TABLE next_auth.accounts TO postgres;\nGRANT ALL ON TABLE next_auth.accounts TO service_role;\n\n--\n-- Create verification_tokens table\n--\nCREATE TABLE IF NOT EXISTS  next_auth.verification_tokens\n(\n    identifier text,\n    token text,\n    expires timestamp with time zone NOT NULL,\n    CONSTRAINT verification_tokens_pkey PRIMARY KEY (token),\n    CONSTRAINT token_unique UNIQUE (token),\n    CONSTRAINT token_identifier_unique UNIQUE (token, identifier)\n);\n\nGRANT ALL ON TABLE next_auth.verification_tokens TO postgres;\nGRANT ALL ON TABLE next_auth.verification_tokens TO service_role;\n'.trim()},{id:17,type:"template",title:"Most frequently invoked",description:"Most frequently called queries in your database.",sql:"-- Most frequently called queries\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    statements.calls desc\n  limit\n    100;"},{id:18,type:"template",title:"Most time consuming",description:"Aggregate time spent on a query type.",sql:"-- Most time consuming queries\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    to_char(((statements.total_exec_time + statements.total_plan_time)/sum(statements.total_exec_time + statements.total_plan_time) over()) * 100, 'FM90D0') || '%' as prop_total_time\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    total_time desc\n  limit\n    100;"},{id:19,type:"template",title:"Slowest execution time",description:"Slowest queries based on max execution time.",sql:"-- Slowest queries by max execution time\n\n-- A limit of 100 has been added below\n\nselect\n    auth.rolname,\n    statements.query,\n    statements.calls,\n    -- -- Postgres 13, 14, 15\n    statements.total_exec_time + statements.total_plan_time as total_time,\n    statements.min_exec_time + statements.min_plan_time as min_time,\n    statements.max_exec_time + statements.max_plan_time as max_time,\n    statements.mean_exec_time + statements.mean_plan_time as mean_time,\n    -- -- Postgres <= 12\n    -- total_time,\n    -- min_time,\n    -- max_time,\n    -- mean_time,\n    statements.rows / statements.calls as avg_rows\n  from pg_stat_statements as statements\n    inner join pg_authid as auth on statements.userid = auth.oid\n  order by\n    max_time desc\n  limit\n    100;"},{id:20,type:"template",title:"Hit rate",description:"See your cache and index hit rate.",sql:"-- Cache and index hit rate\n\nselect\n    'index hit rate' as name,\n    (sum(idx_blks_hit)) / nullif(sum(idx_blks_hit + idx_blks_read),0) as ratio\n  from pg_statio_user_indexes\n  union all\n  select\n    'table hit rate' as name,\n    sum(heap_blks_hit) / nullif(sum(heap_blks_hit) + sum(heap_blks_read),0) as ratio\n  from pg_statio_user_tables;"},{id:21,type:"quickstart",title:"OpenAI Vector Search",description:"Template for the Next.js OpenAI Doc Search Starter.",sql:'\n-- Enable pg_vector extension\ncreate extension if not exists vector with schema public;\n\n-- Create tables\ncreate table "public"."nods_page" (\n  id bigserial primary key,\n  parent_page_id bigint references public.nods_page,\n  path text not null unique,\n  checksum text,\n  meta jsonb,\n  type text,\n  source text\n);\nalter table "public"."nods_page" enable row level security;\n\ncreate table "public"."nods_page_section" (\n  id bigserial primary key,\n  page_id bigint not null references public.nods_page on delete cascade,\n  content text,\n  token_count int,\n  embedding vector(1536),\n  slug text,\n  heading text\n);\nalter table "public"."nods_page_section" enable row level security;\n\n-- Create embedding similarity search functions\ncreate or replace function match_page_sections(embedding vector(1536), match_threshold float, match_count int, min_content_length int)\nreturns table (id bigint, page_id bigint, slug text, heading text, content text, similarity float)\nlanguage plpgsql\nas $$\n#variable_conflict use_variable\nbegin\n  return query\n  select\n    nods_page_section.id,\n    nods_page_section.page_id,\n    nods_page_section.slug,\n    nods_page_section.heading,\n    nods_page_section.content,\n    (nods_page_section.embedding <#> embedding) * -1 as similarity\n  from nods_page_section\n\n  -- We only care about sections that have a useful amount of content\n  where length(nods_page_section.content) >= min_content_length\n\n  -- The dot product is negative because of a Postgres limitation, so we negate it\n  and (nods_page_section.embedding <#> embedding) * -1 > match_threshold\n\n  -- OpenAI embeddings are normalized to length 1, so\n  -- cosine similarity and dot product will produce the same results.\n  -- Using dot product which can be computed slightly faster.\n  --\n  -- For the different syntaxes, see https://github.com/pgvector/pgvector\n  order by nods_page_section.embedding <#> embedding\n\n  limit match_count;\nend;\n$$;\n\ncreate or replace function get_page_parents(page_id bigint)\nreturns table (id bigint, parent_page_id bigint, path text, meta jsonb)\nlanguage sql\nas $$\n  with recursive chain as (\n    select *\n    from nods_page\n    where id = page_id\n\n    union all\n\n    select child.*\n      from nods_page as child\n      join chain on chain.parent_page_id = child.id\n  )\n  select id, parent_page_id, path, meta\n  from chain;\n$$;\n'.trim()},{id:22,type:"template",title:"Replication status report",description:"See the status of your replication slots and replication lag.",sql:"-- Replication status report\n\nSELECT\n  s.slot_name,\n  s.active,\n  COALESCE(r.state, 'N/A') as state,\n  COALESCE(r.client_addr, null) as replication_client_address,\n  GREATEST(0, ROUND((redo_lsn-restart_lsn)/1024/1024/1024, 2)) as replication_lag_gb\nFROM pg_control_checkpoint(), pg_replication_slots s\nLEFT JOIN pg_stat_replication r ON (r.pid = s.active_pid);\n"},{id:23,type:"quickstart",title:"LangChain",description:"LangChain is a popular framework for working with AI, Vectors, and embeddings.",sql:"\n-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n".trim()},{id:24,type:"template",title:"Install dbdev",description:"dbdev is a client for installing Trusted Language Extensions (TLE) into your database.",sql:"\n/*---------------------\n---- install dbdev ----\n-----------------------\nRequires:\n  - pg_tle: https://github.com/aws/pg_tle\n  - pgsql-http: https://github.com/pramsey/pgsql-http\n\nWarning:\nRestoring a logical backup of a database with a TLE installed can fail.\nFor this reason, dbdev should only be used with databases with physical backups enabled.\n*/\ncreate extension if not exists http with schema extensions;\ncreate extension if not exists pg_tle;\nselect pgtle.uninstall_extension_if_exists('supabase-dbdev');\ndrop extension if exists \"supabase-dbdev\";\nselect\n    pgtle.install_extension(\n        'supabase-dbdev',\n        resp.contents ->> 'version',\n        'PostgreSQL package manager',\n        resp.contents ->> 'sql'\n    )\nfrom http(\n    (\n        'GET',\n        'https://api.database.dev/rest/v1/'\n        || 'package_versions?select=sql,version'\n        || '&package_name=eq.supabase-dbdev'\n        || '&order=version.desc'\n        || '&limit=1',\n        array[\n            ('apiKey', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhtdXB0cHBsZnZpaWZyYndtbXR2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE2ODAxMDczNzIsImV4cCI6MTk5NTY4MzM3Mn0.z2CN0mvO2No8wSi46Gw59DFGCTJrzM0AQKsu_5k134s')::http_header\n        ],\n        null,\n        null\n    )\n) x,\nlateral (\n    select\n        ((row_to_json(x) -> 'content') #>> '{}')::json -> 0\n) resp(contents);\ncreate extension \"supabase-dbdev\";\nselect dbdev.install('supabase-dbdev');\ndrop extension if exists \"supabase-dbdev\";\ncreate extension \"supabase-dbdev\";\n".trim()},{id:25,type:"template",title:"Large objects",description:"List large objects (tables/indexes) in your database.",sql:"SELECT\n    SCHEMA_NAME,\n    relname,\n    table_size\n  FROM\n    (SELECT\n      pg_catalog.pg_namespace.nspname AS SCHEMA_NAME,\n      relname,\n      pg_relation_size(pg_catalog.pg_class.oid) AS table_size\n    FROM pg_catalog.pg_class\n    JOIN pg_catalog.pg_namespace ON relnamespace = pg_catalog.pg_namespace.oid\n    ) t\n  WHERE SCHEMA_NAME NOT LIKE 'pg_%'\n  ORDER BY table_size DESC\n  LIMIT 25".trim()},{id:26,type:"template",title:"Limit MFA verification attempts to one in 2 seconds",description:"Create an Auth hook that limits the number of failed MFA verification attempts to one in 2 seconds.",sql:"\ncreate function public.hook_mfa_verification_attempt(event jsonb)\n  returns jsonb\n  language plpgsql\nas $$\n  declare\n    last_failed_at timestamp;\n  begin\n    if event->'valid' is true then\n      -- code is valid, accept it\n      return jsonb_build_object('decision', 'continue');\n    end if;\n\n    select last_failed_at into last_failed_at\n      from public.mfa_failed_verification_attempts\n      where\n        user_id = (event->'user_id')::uuid\n          and\n        factor_id = event->'factor_id';\n\n    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then\n      -- last attempt was done too quickly\n      return jsonb_build_object(\n        'error', jsonb_build_object(\n          'http_code', 429,\n          'message',   'Please wait a moment before trying again.'\n        )\n      );\n    end if;\n\n    -- record this failed attempt\n    insert into public.mfa_failed_verification_attempts\n      (\n        user_id,\n        factor_id,\n        last_refreshed_at\n      )\n      values\n      (\n        event->'user_id',\n        event->'factor_id',\n        now()\n      )\n      on conflict do update\n        set last_refreshed_at = now();\n\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n    return jsonb_build_object('decision', 'continue');\n  end;\n$$;\n\n-- Assign appropriate permissions and revoke access\ngrant execute\n  on function public.hook_mfa_verification_attempt\n  to supabase_auth_admin;\n\ngrant all\n  on table public.mfa_failed_verification_attempts\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.hook_mfa_verification_attempt\n  from authenticated, anon, public;\n\nrevoke all\n  on table public.mfa_failed_verification_attempts\n  from authenticated, anon, public;\n\ngrant usage on schema public to supabase_auth_admin;".trim()},{id:27,type:"template",title:"Add Auth Hook (Password Verification Attempt)",description:"Create an Auth Hook that limits number of failed password verification attempts to one in 10 seconds",sql:"\ncreate function public.hook_password_verification_attempt(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    last_failed_at timestamp;\n  begin\n    if event->'valid' is true then\n      -- password is valid, accept it\n      return jsonb_build_object('decision', 'continue');\n    end if;\n\n    select last_failed_at into last_failed_at\n      from public.password_failed_verification_attempts\n      where\n        user_id = (event->'user_id')::uuid;\n\n    if last_failed_at is not null and now() - last_failed_at < interval '10 seconds' then\n      -- last attempt was done too quickly\n      return jsonb_build_object(\n        'error', jsonb_build_object(\n          'http_code', 429,\n          'message',   'Please wait a moment before trying again.'\n        )\n      );\n    end if;\n\n    -- record this failed attempt\n    insert into public.password_failed_verification_attempts\n      (\n        user_id,\n        last_failed_at\n      )\n      values\n      (\n        event->'user_id',\n        now()\n      )\n      on conflict do update\n        set last_failed_at = now();\n\n    -- finally let Supabase Auth do the default behavior for a failed attempt\n    return jsonb_build_object('decision', 'continue');\n  end;\n$$;\n\n-- Assign appropriate permissions\ngrant execute\n  on function public.hook_password_verification_attempt\n  to supabase_auth_admin;\n\ngrant all\n  on table public.password_failed_verification_attempts\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.hook_password_verification_attempt\n  from authenticated, anon, public;\n\nrevoke all\n  on table public.password_failed_verification_attempts\n  from authenticated, anon, public;\n\ngrant usage on schema public to supabase_auth_admin;".trim()},{id:28,type:"template",title:"Add Auth Hook (Custom Access Token)",description:"Create an Auth Hook to add custom claims to your Auth Token",sql:"\n-- Assumes that there is an is_admin flag on the profiles table.\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\n  declare\n    claims jsonb;\n    is_admin boolean;\n  begin\n    -- Check if the user is marked as admin in the profiles table\n    select is_admin into is_admin from profiles where user_id = (event->>'user_id')::uuid;\n\n    -- Proceed only if the user is an admin\n    if is_admin then\n      claims := event->'claims';\n\n      -- Check if 'user_metadata' exists in claims\n      if jsonb_typeof(claims->'user_metadata') is null then\n        -- If 'user_metadata' does not exist, create an empty object\n        claims := jsonb_set(claims, '{user_metadata}', '{}');\n      end if;\n\n      -- Set a claim of 'admin'\n      claims := jsonb_set(claims, '{user_metadata, admin}', 'true');\n\n      -- Update the 'claims' object in the original event\n      event := jsonb_set(event, '{claims}', claims);\n    end if;\n\n    -- Return the modified or original event\n    return event;\n  end;\n$$;\n\ngrant execute\n  on function public.custom_access_token_hook\n  to supabase_auth_admin;\n\nrevoke execute\n  on function public.custom_access_token_hook\n  from authenticated, anon, public;\n\ngrant usage on schema public to supabase_auth_admin;".trim()},{id:29,type:"template",title:"Add Auth Hook (General)",description:"Create an Auth Hook",sql:"\ncreate or replace function public.custom_access_token_hook(event jsonb)\nreturns jsonb\nlanguage plpgsql\nas $$\ndeclare\n  -- Insert variables here\nbegin\n  -- Insert logic here\n  return event;\nend;\n$$;\n-- Permissions for the hook\ngrant execute on function public.custom_access_token_hook to supabase_auth_admin;\nrevoke execute on function public.custom_access_token_hook from authenticated, anon, public;\n    "}]},60153:function(e,n,t){"use strict";t.d(n,{Z:function(){return r}});var a=t(97458),i=t(55130),s=t.n(i),r=()=>(0,a.jsx)("div",{className:"w-full h-full flex flex-col items-center justify-center","data-sentry-component":"LogoLoader","data-sentry-source-file":"LogoLoader.tsx",children:(0,a.jsx)("div",{children:(0,a.jsx)("svg",{width:"60",height:"62",viewBox:"0 0 60 62",fill:"none",xmlns:"http://www.w3.org/2000/svg",className:s().loading,"data-sentry-element":"svg","data-sentry-source-file":"LogoLoader.tsx",children:(0,a.jsx)("path",{d:"M30.2571 4.12811L30.257 4.12389C30.2133 1.21067 26.5349 -0.034778 24.7224 2.24311L1.76109 31.0996C-1.21104 34.8348 1.45637 40.34 6.23131 40.34H29.4845L29.7563 58.4432C29.8 61.3564 33.4783 62.6016 35.2908 60.324L34.8996 60.0127L35.2908 60.324L58.2521 31.4674C61.2241 27.7322 58.5568 22.227 53.782 22.227H30.3762L30.2571 4.12811Z",stroke:"hsl(var(--brand-default))",strokeWidth:2,strokeLinecap:"round","data-sentry-element":"path","data-sentry-source-file":"LogoLoader.tsx"})})})})},55130:function(e){e.exports={loading:"loading-anim_loading__rDN7u",dash:"loading-anim_dash__HIPR0"}}}]);